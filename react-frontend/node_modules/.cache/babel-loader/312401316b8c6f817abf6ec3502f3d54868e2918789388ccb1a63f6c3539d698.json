{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lorenzo\\\\Desktop\\\\chatbot\\\\react-frontend\\\\src\\\\MarkdownRenderer.js\";\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\n\n// 1. Error Boundary Component\n// This class component will catch rendering errors in its children.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MarkdownErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return {\n      hasError: true\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    console.error(\"Error rendering Markdown:\", error, errorInfo);\n  }\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: \"Error: Impossibile renderizzare questo contenuto.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 14\n      }, this);\n    }\n    return this.props.children;\n  }\n}\n\n// 2. Memoized Markdown Renderer Component\n// This component handles the actual rendering and is wrapped by the Error Boundary.\nconst MemoizedMarkdownRenderer = /*#__PURE__*/React.memo(_c = ({\n  content\n}) => {\n  // More robust content sanitization to handle objects and other types\n  let sanitizedContent;\n  if (typeof content === 'string') {\n    sanitizedContent = content;\n  } else if (content === null || content === undefined) {\n    sanitizedContent = '';\n  } else if (typeof content === 'object') {\n    // Handle objects and arrays\n    try {\n      sanitizedContent = JSON.stringify(content, null, 2);\n    } catch (e) {\n      sanitizedContent = \"[Contenuto non serializzabile]\";\n    }\n  } else if (typeof content.toString === 'function') {\n    sanitizedContent = content.toString();\n  } else {\n    sanitizedContent = String(content);\n  }\n\n  // Ensure we always have a valid string\n  const stringContent = sanitizedContent || '';\n\n  // Additional check to ensure we're not passing undefined\n  if (stringContent === undefined || stringContent === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Contenuto vuoto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n    remarkPlugins: [remarkGfm],\n    children: stringContent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n});\n\n// 3. Main Component to be exported\n// This component combines the Error Boundary and the Renderer.\n_c2 = MemoizedMarkdownRenderer;\nconst MarkdownRenderer = ({\n  content\n}) => {\n  // Ensure content is a string before passing it down\n  let stringContent;\n  if (typeof content === 'string') {\n    stringContent = content;\n  } else if (content === null || content === undefined) {\n    stringContent = '';\n  } else if (typeof content === 'object') {\n    // Handle objects and arrays\n    try {\n      stringContent = JSON.stringify(content, null, 2);\n    } catch (e) {\n      stringContent = \"[Contenuto non serializzabile]\";\n    }\n  } else if (typeof content.toString === 'function') {\n    stringContent = content.toString();\n  } else {\n    stringContent = String(content);\n  }\n\n  // Additional check to ensure we're not passing undefined\n  if (stringContent === undefined || stringContent === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Contenuto vuoto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(MarkdownErrorBoundary, {\n    children: /*#__PURE__*/_jsxDEV(MemoizedMarkdownRenderer, {\n      content: stringContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_c3 = MarkdownRenderer;\nexport default MarkdownRenderer;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MemoizedMarkdownRenderer$React.memo\");\n$RefreshReg$(_c2, \"MemoizedMarkdownRenderer\");\n$RefreshReg$(_c3, \"MarkdownRenderer\");","map":{"version":3,"names":["React","ReactMarkdown","remarkGfm","jsxDEV","_jsxDEV","MarkdownErrorBoundary","Component","constructor","props","state","hasError","getDerivedStateFromError","error","componentDidCatch","errorInfo","console","render","children","fileName","_jsxFileName","lineNumber","columnNumber","MemoizedMarkdownRenderer","memo","_c","content","sanitizedContent","undefined","JSON","stringify","e","toString","String","stringContent","remarkPlugins","_c2","MarkdownRenderer","_c3","$RefreshReg$"],"sources":["C:/Users/Lorenzo/Desktop/chatbot/react-frontend/src/MarkdownRenderer.js"],"sourcesContent":["import React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport remarkGfm from 'remark-gfm';\r\n\r\n// 1. Error Boundary Component\r\n// This class component will catch rendering errors in its children.\r\nclass MarkdownErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // You can also log the error to an error reporting service\r\n    console.error(\"Error rendering Markdown:\", error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return <pre>Error: Impossibile renderizzare questo contenuto.</pre>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\n// 2. Memoized Markdown Renderer Component\r\n// This component handles the actual rendering and is wrapped by the Error Boundary.\r\nconst MemoizedMarkdownRenderer = React.memo(({ content }) => {\r\n  // More robust content sanitization to handle objects and other types\r\n  let sanitizedContent;\r\n  \r\n  if (typeof content === 'string') {\r\n    sanitizedContent = content;\r\n  } else if (content === null || content === undefined) {\r\n    sanitizedContent = '';\r\n  } else if (typeof content === 'object') {\r\n    // Handle objects and arrays\r\n    try {\r\n      sanitizedContent = JSON.stringify(content, null, 2);\r\n    } catch (e) {\r\n      sanitizedContent = \"[Contenuto non serializzabile]\";\r\n    }\r\n  } else if (typeof content.toString === 'function') {\r\n    sanitizedContent = content.toString();\r\n  } else {\r\n    sanitizedContent = String(content);\r\n  }\r\n  \r\n  // Ensure we always have a valid string\r\n  const stringContent = sanitizedContent || '';\r\n  \r\n  // Additional check to ensure we're not passing undefined\r\n  if (stringContent === undefined || stringContent === null) {\r\n    return <div>Contenuto vuoto</div>;\r\n  }\r\n  \r\n  return (\r\n    <ReactMarkdown remarkPlugins={[remarkGfm]}>\r\n      {stringContent}\r\n    </ReactMarkdown>\r\n  );\r\n});\r\n\r\n// 3. Main Component to be exported\r\n// This component combines the Error Boundary and the Renderer.\r\nconst MarkdownRenderer = ({ content }) => {\r\n  // Ensure content is a string before passing it down\r\n  let stringContent;\r\n  \r\n  if (typeof content === 'string') {\r\n    stringContent = content;\r\n  } else if (content === null || content === undefined) {\r\n    stringContent = '';\r\n  } else if (typeof content === 'object') {\r\n    // Handle objects and arrays\r\n    try {\r\n      stringContent = JSON.stringify(content, null, 2);\r\n    } catch (e) {\r\n      stringContent = \"[Contenuto non serializzabile]\";\r\n    }\r\n  } else if (typeof content.toString === 'function') {\r\n    stringContent = content.toString();\r\n  } else {\r\n    stringContent = String(content);\r\n  }\r\n  \r\n  // Additional check to ensure we're not passing undefined\r\n  if (stringContent === undefined || stringContent === null) {\r\n    return <div>Contenuto vuoto</div>;\r\n  }\r\n  \r\n  return (\r\n    <MarkdownErrorBoundary>\r\n      <MemoizedMarkdownRenderer content={stringContent} />\r\n    </MarkdownErrorBoundary>\r\n  );\r\n};\r\n\r\nexport default MarkdownRenderer;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}